/**
 * @fileoverview gRPC-Web generated client stub for arrow.flight.protocol
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.17.3
// source: Flight.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.arrow = {};
proto.arrow.flight = {};
proto.arrow.flight.protocol = require('./Flight_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.arrow.flight.protocol.FlightServiceClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.arrow.flight.protocol.FlightServicePromiseClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.arrow.flight.protocol.Criteria,
 *   !proto.arrow.flight.protocol.FlightInfo>}
 */
const methodDescriptor_FlightService_ListFlights = new grpc.web.MethodDescriptor(
  '/arrow.flight.protocol.FlightService/ListFlights',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.arrow.flight.protocol.Criteria,
  proto.arrow.flight.protocol.FlightInfo,
  /**
   * @param {!proto.arrow.flight.protocol.Criteria} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.arrow.flight.protocol.FlightInfo.deserializeBinary,
);

/**
 * @param {!proto.arrow.flight.protocol.Criteria} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.arrow.flight.protocol.FlightInfo>}
 *     The XHR Node Readable Stream
 */
proto.arrow.flight.protocol.FlightServiceClient.prototype.listFlights = function (
  request,
  metadata,
) {
  return this.client_.serverStreaming(
    this.hostname_ + '/arrow.flight.protocol.FlightService/ListFlights',
    request,
    metadata || {},
    methodDescriptor_FlightService_ListFlights,
  );
};

/**
 * @param {!proto.arrow.flight.protocol.Criteria} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.arrow.flight.protocol.FlightInfo>}
 *     The XHR Node Readable Stream
 */
proto.arrow.flight.protocol.FlightServicePromiseClient.prototype.listFlights = function (
  request,
  metadata,
) {
  return this.client_.serverStreaming(
    this.hostname_ + '/arrow.flight.protocol.FlightService/ListFlights',
    request,
    metadata || {},
    methodDescriptor_FlightService_ListFlights,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.arrow.flight.protocol.FlightDescriptor,
 *   !proto.arrow.flight.protocol.FlightInfo>}
 */
const methodDescriptor_FlightService_GetFlightInfo = new grpc.web.MethodDescriptor(
  '/arrow.flight.protocol.FlightService/GetFlightInfo',
  grpc.web.MethodType.UNARY,
  proto.arrow.flight.protocol.FlightDescriptor,
  proto.arrow.flight.protocol.FlightInfo,
  /**
   * @param {!proto.arrow.flight.protocol.FlightDescriptor} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.arrow.flight.protocol.FlightInfo.deserializeBinary,
);

/**
 * @param {!proto.arrow.flight.protocol.FlightDescriptor} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.arrow.flight.protocol.FlightInfo)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.arrow.flight.protocol.FlightInfo>|undefined}
 *     The XHR Node Readable Stream
 */
proto.arrow.flight.protocol.FlightServiceClient.prototype.getFlightInfo = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/arrow.flight.protocol.FlightService/GetFlightInfo',
    request,
    metadata || {},
    methodDescriptor_FlightService_GetFlightInfo,
    callback,
  );
};

/**
 * @param {!proto.arrow.flight.protocol.FlightDescriptor} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.arrow.flight.protocol.FlightInfo>}
 *     Promise that resolves to the response
 */
proto.arrow.flight.protocol.FlightServicePromiseClient.prototype.getFlightInfo = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/arrow.flight.protocol.FlightService/GetFlightInfo',
    request,
    metadata || {},
    methodDescriptor_FlightService_GetFlightInfo,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.arrow.flight.protocol.FlightDescriptor,
 *   !proto.arrow.flight.protocol.SchemaResult>}
 */
const methodDescriptor_FlightService_GetSchema = new grpc.web.MethodDescriptor(
  '/arrow.flight.protocol.FlightService/GetSchema',
  grpc.web.MethodType.UNARY,
  proto.arrow.flight.protocol.FlightDescriptor,
  proto.arrow.flight.protocol.SchemaResult,
  /**
   * @param {!proto.arrow.flight.protocol.FlightDescriptor} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.arrow.flight.protocol.SchemaResult.deserializeBinary,
);

/**
 * @param {!proto.arrow.flight.protocol.FlightDescriptor} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.arrow.flight.protocol.SchemaResult)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.arrow.flight.protocol.SchemaResult>|undefined}
 *     The XHR Node Readable Stream
 */
proto.arrow.flight.protocol.FlightServiceClient.prototype.getSchema = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/arrow.flight.protocol.FlightService/GetSchema',
    request,
    metadata || {},
    methodDescriptor_FlightService_GetSchema,
    callback,
  );
};

/**
 * @param {!proto.arrow.flight.protocol.FlightDescriptor} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.arrow.flight.protocol.SchemaResult>}
 *     Promise that resolves to the response
 */
proto.arrow.flight.protocol.FlightServicePromiseClient.prototype.getSchema = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/arrow.flight.protocol.FlightService/GetSchema',
    request,
    metadata || {},
    methodDescriptor_FlightService_GetSchema,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.arrow.flight.protocol.Ticket,
 *   !proto.arrow.flight.protocol.FlightData>}
 */
const methodDescriptor_FlightService_DoGet = new grpc.web.MethodDescriptor(
  '/arrow.flight.protocol.FlightService/DoGet',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.arrow.flight.protocol.Ticket,
  proto.arrow.flight.protocol.FlightData,
  /**
   * @param {!proto.arrow.flight.protocol.Ticket} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.arrow.flight.protocol.FlightData.deserializeBinary,
);

/**
 * @param {!proto.arrow.flight.protocol.Ticket} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.arrow.flight.protocol.FlightData>}
 *     The XHR Node Readable Stream
 */
proto.arrow.flight.protocol.FlightServiceClient.prototype.doGet = function (request, metadata) {
  return this.client_.serverStreaming(
    this.hostname_ + '/arrow.flight.protocol.FlightService/DoGet',
    request,
    metadata || {},
    methodDescriptor_FlightService_DoGet,
  );
};

/**
 * @param {!proto.arrow.flight.protocol.Ticket} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.arrow.flight.protocol.FlightData>}
 *     The XHR Node Readable Stream
 */
proto.arrow.flight.protocol.FlightServicePromiseClient.prototype.doGet = function (
  request,
  metadata,
) {
  return this.client_.serverStreaming(
    this.hostname_ + '/arrow.flight.protocol.FlightService/DoGet',
    request,
    metadata || {},
    methodDescriptor_FlightService_DoGet,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.arrow.flight.protocol.Action,
 *   !proto.arrow.flight.protocol.Result>}
 */
const methodDescriptor_FlightService_DoAction = new grpc.web.MethodDescriptor(
  '/arrow.flight.protocol.FlightService/DoAction',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.arrow.flight.protocol.Action,
  proto.arrow.flight.protocol.Result,
  /**
   * @param {!proto.arrow.flight.protocol.Action} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.arrow.flight.protocol.Result.deserializeBinary,
);

/**
 * @param {!proto.arrow.flight.protocol.Action} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.arrow.flight.protocol.Result>}
 *     The XHR Node Readable Stream
 */
proto.arrow.flight.protocol.FlightServiceClient.prototype.doAction = function (request, metadata) {
  return this.client_.serverStreaming(
    this.hostname_ + '/arrow.flight.protocol.FlightService/DoAction',
    request,
    metadata || {},
    methodDescriptor_FlightService_DoAction,
  );
};

/**
 * @param {!proto.arrow.flight.protocol.Action} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.arrow.flight.protocol.Result>}
 *     The XHR Node Readable Stream
 */
proto.arrow.flight.protocol.FlightServicePromiseClient.prototype.doAction = function (
  request,
  metadata,
) {
  return this.client_.serverStreaming(
    this.hostname_ + '/arrow.flight.protocol.FlightService/DoAction',
    request,
    metadata || {},
    methodDescriptor_FlightService_DoAction,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.arrow.flight.protocol.Empty,
 *   !proto.arrow.flight.protocol.ActionType>}
 */
const methodDescriptor_FlightService_ListActions = new grpc.web.MethodDescriptor(
  '/arrow.flight.protocol.FlightService/ListActions',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.arrow.flight.protocol.Empty,
  proto.arrow.flight.protocol.ActionType,
  /**
   * @param {!proto.arrow.flight.protocol.Empty} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.arrow.flight.protocol.ActionType.deserializeBinary,
);

/**
 * @param {!proto.arrow.flight.protocol.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.arrow.flight.protocol.ActionType>}
 *     The XHR Node Readable Stream
 */
proto.arrow.flight.protocol.FlightServiceClient.prototype.listActions = function (
  request,
  metadata,
) {
  return this.client_.serverStreaming(
    this.hostname_ + '/arrow.flight.protocol.FlightService/ListActions',
    request,
    metadata || {},
    methodDescriptor_FlightService_ListActions,
  );
};

/**
 * @param {!proto.arrow.flight.protocol.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.arrow.flight.protocol.ActionType>}
 *     The XHR Node Readable Stream
 */
proto.arrow.flight.protocol.FlightServicePromiseClient.prototype.listActions = function (
  request,
  metadata,
) {
  return this.client_.serverStreaming(
    this.hostname_ + '/arrow.flight.protocol.FlightService/ListActions',
    request,
    metadata || {},
    methodDescriptor_FlightService_ListActions,
  );
};

module.exports = proto.arrow.flight.protocol;
